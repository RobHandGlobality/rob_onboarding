"""
Init models

Revision ID: c04345bd5fc8
Revises: e107ab9eb193
Create Date: 2019-11-03 16:26:27.762413

"""
import sqlalchemy as sa
import sqlalchemy_utils
from alembic import op
from microcosm_postgres.models import UTCDateTime
from microcosm_postgres.types import EnumType, Serial
from sqlalchemy import FetchedValue
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
from rob_onboarding.models.order_event_type import OrderEventType


revision = "c04345bd5fc8"
down_revision = "e107ab9eb193"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "order",
        sa.Column("id", sqlalchemy_utils.types.uuid.UUIDType(), nullable=False),
        sa.Column("created_at", sa.Float(), nullable=False),
        sa.Column("updated_at", sa.Float(), nullable=False),
        sa.Column("customer_id", sqlalchemy_utils.types.uuid.UUIDType(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "pizza",
        sa.Column("id", sqlalchemy_utils.types.uuid.UUIDType(), nullable=False),
        sa.Column("created_at", UTCDateTime(), nullable=False),
        sa.Column("updated_at", UTCDateTime(), nullable=False),
        sa.Column(
            "customer_id", sqlalchemy_utils.types.uuid.UUIDType(), nullable=False
        ),
        sa.Column("size", sa.Integer(), nullable=False),
        sa.Column("crust_type", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "topping",
        sa.Column("id", sqlalchemy_utils.types.uuid.UUIDType(), nullable=False),
        sa.Column("created_at", sa.Float(), nullable=False),
        sa.Column("updated_at", sa.Float(), nullable=False),
        sa.Column("pizza_id", sqlalchemy_utils.types.uuid.UUIDType(), nullable=True),
        sa.Column("topping_type", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "order_event",
        sa.Column("id", sqlalchemy_utils.types.uuid.UUIDType(), nullable=False),
        sa.Column("created_at", sa.Float(), nullable=False),
        sa.Column("updated_at", sa.Float(), nullable=False),
        sa.Column("order_id", sqlalchemy_utils.types.uuid.UUIDType(), nullable=False),
        sa.Column("event_type", EnumType(enum_class=OrderEventType), nullable=False),
        sa.Column("clock", Serial(), server_default=FetchedValue(), nullable=False),
        sa.Column("parent_id", sqlalchemy_utils.types.uuid.UUIDType(), nullable=True),
        sa.Column("state", postgresql.ARRAY(EnumType(enum_class=OrderEventType)), nullable=False),
        sa.Column("version", sa.Integer(), nullable=False),
        sa.CheckConstraint(
            "parent_id IS NOT NULL OR (version = 1 AND event_type IN ('OrderInitialized'))",
            name="require_order_event_parent_id",
        ),
        sa.ForeignKeyConstraint(["order_id"], ["order.id"],),
        sa.ForeignKeyConstraint(["parent_id"], ["order_event.id"],),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("clock"),
        sa.UniqueConstraint("parent_id"),
    )
    op.create_index(
        "order_event_unique_logical_clock",
        "order_event",
        ["order_id", "clock"],
        unique=True,
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index("order_event_unique_logical_clock", table_name="order_event")
    op.drop_table("order_event")
    op.drop_table("topping")
    op.drop_table("pizza")
    op.drop_table("order")
    # ### end Alembic commands ###
